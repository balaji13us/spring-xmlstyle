package me.bs.java.usermanagement.backend.mapper;

import java.util.List;
import java.util.Map;
import me.bs.java.usermanagement.backend.model.Address;
import me.bs.java.usermanagement.backend.model.AddressCriteria.Criteria;
import me.bs.java.usermanagement.backend.model.AddressCriteria.Criterion;
import me.bs.java.usermanagement.backend.model.AddressCriteria;
import org.apache.ibatis.jdbc.SQL;

public class AddressSqlProvider {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ADDRESS
	 * @mbg.generated  Sat Apr 06 20:22:22 IST 2019
	 */
	public String countByExample(AddressCriteria example) {
		SQL sql = new SQL();
		sql.SELECT("count(*)").FROM("ADDRESS");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ADDRESS
	 * @mbg.generated  Sat Apr 06 20:22:22 IST 2019
	 */
	public String deleteByExample(AddressCriteria example) {
		SQL sql = new SQL();
		sql.DELETE_FROM("ADDRESS");
		applyWhere(sql, example, false);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ADDRESS
	 * @mbg.generated  Sat Apr 06 20:22:22 IST 2019
	 */
	public String insertSelective(Address record) {
		SQL sql = new SQL();
		sql.INSERT_INTO("ADDRESS");
		if (record.getProxy() != null) {
			sql.VALUES("PROXY", "#{proxy,jdbcType=VARCHAR}");
		}
		if (record.getIsPrimary() != null) {
			sql.VALUES("IS_PRIMARY", "#{isPrimary,jdbcType=VARCHAR}");
		}
		if (record.getAddressType() != null) {
			sql.VALUES("ADDRESS_TYPE", "#{addressType,jdbcType=VARCHAR}");
		}
		if (record.getLine1() != null) {
			sql.VALUES("LINE1", "#{line1,jdbcType=VARCHAR}");
		}
		if (record.getLine2() != null) {
			sql.VALUES("LINE2", "#{line2,jdbcType=VARCHAR}");
		}
		if (record.getLine3() != null) {
			sql.VALUES("LINE3", "#{line3,jdbcType=VARCHAR}");
		}
		if (record.getLine4() != null) {
			sql.VALUES("LINE4", "#{line4,jdbcType=VARCHAR}");
		}
		if (record.getLine5() != null) {
			sql.VALUES("LINE5", "#{line5,jdbcType=VARCHAR}");
		}
		if (record.getCity() != null) {
			sql.VALUES("CITY", "#{city,jdbcType=VARCHAR}");
		}
		if (record.getState() != null) {
			sql.VALUES("STATE", "#{state,jdbcType=VARCHAR}");
		}
		if (record.getZip() != null) {
			sql.VALUES("ZIP", "#{zip,jdbcType=VARCHAR}");
		}
		if (record.getCountry() != null) {
			sql.VALUES("COUNTRY", "#{country,jdbcType=VARCHAR}");
		}
		if (record.getPersonId() != null) {
			sql.VALUES("PERSON_ID", "#{personId,jdbcType=BIGINT}");
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ADDRESS
	 * @mbg.generated  Sat Apr 06 20:22:22 IST 2019
	 */
	public String selectByExample(AddressCriteria example) {
		SQL sql = new SQL();
		if (example != null && example.isDistinct()) {
			sql.SELECT_DISTINCT("ID");
		} else {
			sql.SELECT("ID");
		}
		sql.SELECT("PROXY");
		sql.SELECT("IS_PRIMARY");
		sql.SELECT("ADDRESS_TYPE");
		sql.SELECT("LINE1");
		sql.SELECT("LINE2");
		sql.SELECT("LINE3");
		sql.SELECT("LINE4");
		sql.SELECT("LINE5");
		sql.SELECT("CITY");
		sql.SELECT("STATE");
		sql.SELECT("ZIP");
		sql.SELECT("COUNTRY");
		sql.SELECT("PERSON_ID");
		sql.FROM("ADDRESS");
		applyWhere(sql, example, false);
		if (example != null && example.getOrderByClause() != null) {
			sql.ORDER_BY(example.getOrderByClause());
		}
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ADDRESS
	 * @mbg.generated  Sat Apr 06 20:22:22 IST 2019
	 */
	public String updateByExampleSelective(Map<String, Object> parameter) {
		Address record = (Address) parameter.get("record");
		AddressCriteria example = (AddressCriteria) parameter.get("example");
		SQL sql = new SQL();
		sql.UPDATE("ADDRESS");
		if (record.getId() != null) {
			sql.SET("ID = #{record.id,jdbcType=BIGINT}");
		}
		if (record.getProxy() != null) {
			sql.SET("PROXY = #{record.proxy,jdbcType=VARCHAR}");
		}
		if (record.getIsPrimary() != null) {
			sql.SET("IS_PRIMARY = #{record.isPrimary,jdbcType=VARCHAR}");
		}
		if (record.getAddressType() != null) {
			sql.SET("ADDRESS_TYPE = #{record.addressType,jdbcType=VARCHAR}");
		}
		if (record.getLine1() != null) {
			sql.SET("LINE1 = #{record.line1,jdbcType=VARCHAR}");
		}
		if (record.getLine2() != null) {
			sql.SET("LINE2 = #{record.line2,jdbcType=VARCHAR}");
		}
		if (record.getLine3() != null) {
			sql.SET("LINE3 = #{record.line3,jdbcType=VARCHAR}");
		}
		if (record.getLine4() != null) {
			sql.SET("LINE4 = #{record.line4,jdbcType=VARCHAR}");
		}
		if (record.getLine5() != null) {
			sql.SET("LINE5 = #{record.line5,jdbcType=VARCHAR}");
		}
		if (record.getCity() != null) {
			sql.SET("CITY = #{record.city,jdbcType=VARCHAR}");
		}
		if (record.getState() != null) {
			sql.SET("STATE = #{record.state,jdbcType=VARCHAR}");
		}
		if (record.getZip() != null) {
			sql.SET("ZIP = #{record.zip,jdbcType=VARCHAR}");
		}
		if (record.getCountry() != null) {
			sql.SET("COUNTRY = #{record.country,jdbcType=VARCHAR}");
		}
		if (record.getPersonId() != null) {
			sql.SET("PERSON_ID = #{record.personId,jdbcType=BIGINT}");
		}
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ADDRESS
	 * @mbg.generated  Sat Apr 06 20:22:22 IST 2019
	 */
	public String updateByExample(Map<String, Object> parameter) {
		SQL sql = new SQL();
		sql.UPDATE("ADDRESS");
		sql.SET("ID = #{record.id,jdbcType=BIGINT}");
		sql.SET("PROXY = #{record.proxy,jdbcType=VARCHAR}");
		sql.SET("IS_PRIMARY = #{record.isPrimary,jdbcType=VARCHAR}");
		sql.SET("ADDRESS_TYPE = #{record.addressType,jdbcType=VARCHAR}");
		sql.SET("LINE1 = #{record.line1,jdbcType=VARCHAR}");
		sql.SET("LINE2 = #{record.line2,jdbcType=VARCHAR}");
		sql.SET("LINE3 = #{record.line3,jdbcType=VARCHAR}");
		sql.SET("LINE4 = #{record.line4,jdbcType=VARCHAR}");
		sql.SET("LINE5 = #{record.line5,jdbcType=VARCHAR}");
		sql.SET("CITY = #{record.city,jdbcType=VARCHAR}");
		sql.SET("STATE = #{record.state,jdbcType=VARCHAR}");
		sql.SET("ZIP = #{record.zip,jdbcType=VARCHAR}");
		sql.SET("COUNTRY = #{record.country,jdbcType=VARCHAR}");
		sql.SET("PERSON_ID = #{record.personId,jdbcType=BIGINT}");
		AddressCriteria example = (AddressCriteria) parameter.get("example");
		applyWhere(sql, example, true);
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ADDRESS
	 * @mbg.generated  Sat Apr 06 20:22:22 IST 2019
	 */
	public String updateByPrimaryKeySelective(Address record) {
		SQL sql = new SQL();
		sql.UPDATE("ADDRESS");
		if (record.getProxy() != null) {
			sql.SET("PROXY = #{proxy,jdbcType=VARCHAR}");
		}
		if (record.getIsPrimary() != null) {
			sql.SET("IS_PRIMARY = #{isPrimary,jdbcType=VARCHAR}");
		}
		if (record.getAddressType() != null) {
			sql.SET("ADDRESS_TYPE = #{addressType,jdbcType=VARCHAR}");
		}
		if (record.getLine1() != null) {
			sql.SET("LINE1 = #{line1,jdbcType=VARCHAR}");
		}
		if (record.getLine2() != null) {
			sql.SET("LINE2 = #{line2,jdbcType=VARCHAR}");
		}
		if (record.getLine3() != null) {
			sql.SET("LINE3 = #{line3,jdbcType=VARCHAR}");
		}
		if (record.getLine4() != null) {
			sql.SET("LINE4 = #{line4,jdbcType=VARCHAR}");
		}
		if (record.getLine5() != null) {
			sql.SET("LINE5 = #{line5,jdbcType=VARCHAR}");
		}
		if (record.getCity() != null) {
			sql.SET("CITY = #{city,jdbcType=VARCHAR}");
		}
		if (record.getState() != null) {
			sql.SET("STATE = #{state,jdbcType=VARCHAR}");
		}
		if (record.getZip() != null) {
			sql.SET("ZIP = #{zip,jdbcType=VARCHAR}");
		}
		if (record.getCountry() != null) {
			sql.SET("COUNTRY = #{country,jdbcType=VARCHAR}");
		}
		if (record.getPersonId() != null) {
			sql.SET("PERSON_ID = #{personId,jdbcType=BIGINT}");
		}
		sql.WHERE("ID = #{id,jdbcType=BIGINT}");
		return sql.toString();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table ADDRESS
	 * @mbg.generated  Sat Apr 06 20:22:22 IST 2019
	 */
	protected void applyWhere(SQL sql, AddressCriteria example, boolean includeExamplePhrase) {
		if (example == null) {
			return;
		}
		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase) {
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else {
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}
		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++) {
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid()) {
				if (firstCriteria) {
					firstCriteria = false;
				} else {
					sb.append(" or ");
				}
				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++) {
					Criterion criterion = criterions.get(j);
					if (firstCriterion) {
						firstCriterion = false;
					} else {
						sb.append(" and ");
					}
					if (criterion.isNoValue()) {
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
						} else {
							sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
						} else {
							sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue()) {
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++) {
							if (comma) {
								sb.append(", ");
							} else {
								comma = true;
							}
							if (criterion.getTypeHandler() == null) {
								sb.append(String.format(parmPhrase3, i, j, k));
							} else {
								sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}
		if (sb.length() > 0) {
			sql.WHERE(sb.toString());
		}
	}
}